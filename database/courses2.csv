"COMP1000","Introduction to World Wide Web, Spreadsheets and Databases","<a href="/faculties/2017/eng/eng.html">Faculty of Engineering</a>","<a href="http://www.cse.unsw.edu.au/">School of Computer Science and Engineering</a>","<a class='iw_tst' href='http://www.cse.unsw.edu.au/~cs1000'>http://www.cse.unsw.edu.au/~cs1000</a>","Sydney","Undergraduate","6","0.12500","0","","COMP0011, GENE8000","2","Yes"," <b>Note(s)</b>: This course is available as General Education and can therefore not be taken by students enrolled in an Engineering program.<br /><br />World wide web (WWW) dependent activities have become an essential part of our existence and yet many of us do not know much about how they work. In the first part of this course, we introduce the abstract features of the internet and the software that makes it so powerful. Knowledge about the architecture of the internet, world wide web, browsers, search engines, e-commerce, security, etc. will be helpful in using the internet more effectively as well as becoming aware of the several pitfalls associated with this modern technology.<br /><br />Spreadsheets and databases are two of the most commonly used and powerful computer tools yet they are often poorly utilised and the reasons for using one rather than the other are poorly understood. Many people purchase Microsoft Office which comes bundled with Microsoft Excel and Microsoft Access - a spreadsheet and a database application - yet while many people have some familiarity with Microsoft Excel, Microsoft Access is rarely utilised. This course aims to explain in straightforward terms the concepts underlying both of these powerful pieces of software so that students can exploit them effectively for both their studies and future careers. We will investigate how to design and implement effective spreadsheet and database applications. Students should also be able to transfer these skills to other similar spreadsheet and database packages. <br /><br />Lab access will be provided, however students will be expected to have personal copies of Microsoft Excel and Microsoft Access on their own computers."
"COMP1400","Programming for Designers","<a href="/faculties/2017/eng/eng.html">Faculty of Engineering</a>","<a href="http://www.cse.unsw.edu.au/">School of Computer Science and Engineering</a>","<a class='iw_tst' href='http://www.cse.unsw.edu.au/~cs1400'>www.cse.unsw.edu.au/~cs1400</a>","Sydney","Undergraduate","6","0.12500","3"," Enrolment in a non-CSE program.","INFS1609, INFS2609","2","Yes"," An introduction to the concepts and techniques of object oriented programming with a focus on the construction of interactive multimedia applications. Delivery is through lectures and computer lab classes. Assessment will be via a number of in-class exercises and staged assignments."
"COMP1511","Introduction to Programming","<a href="/faculties/2017/eng/eng.html">Faculty of Engineering</a>","<a href="http://www.cse.unsw.edu.au/">School of Computer Science and Engineering</a>","<a class='iw_tst' href='https://www.engineering.unsw.edu.au/computer-science-engineering/courses-programs/undergraduate'>Refer to the School's website</a>","Sydney","Undergraduate","6","0.12500","7","","","2","Yes"," An introduction to problem-solving via programming, which aims to have students develop proficiency in using a high level programming language. Topics: algorithms, program structures (statements, sequence, selection, iteration, functions), data types (numeric, character), data structures (arrays, tuples, pointers, lists), storage structures (memory, addresses), introduction to analysis of algorithms, testing, code quality, teamwork, and reflective practice. The course includes extensive practical work in labs and programming projects."
"COMP1521","Computer Systems Fundamentals","<a href="/faculties/2017/eng/eng.html">Faculty of Engineering</a>","<a href="http://www.cse.unsw.edu.au/">School of Computer Science and Engineering</a>","<a class='iw_tst' href='https://www.engineering.unsw.edu.au/computer-science-engineering/courses-programs/course-offerings'>School website</a>","Sydney","Undergraduate","6","0.12500","6","COMP1511 or COMP1911 or COMP1917","","2","Yes"," This course provides a programmer's view on how a computer system executes programs, manipulates data and communicates. It enables students to become effective programmers in dealing with issues of performance, portability, and robustness. It is typically taken in the semester after completing COMP1511, but could be delayed and taken later. It serves as a foundation for later courses on networks, operating systems, computer architecture and compilers, where a deeper understanding of systems-level issues is required.<br /><br /><b>Topics:</b><br />Introduction to the systems-level view of computing, number representation, machine-level programming, representing high-level programs in machine code, memory, input/output, system architectures, operating systems, networks, parallelism/concurrency, communication/synchronisation. Labs and assignment work in C and machine code."
"COMP1531","Software Engineering Fundamentals","<a href="/faculties/2017/eng/eng.html">Faculty of Engineering</a>","<a href="http://www.cse.unsw.edu.au/">School of Computer Science and Engineering</a>","<a class='iw_tst' href='https://www.engineering.unsw.edu.au/computer-science-engineering'>School</a>","Sydney","Undergraduate","6","0.12500","7","COMP1511 or COMP1917 or COMP1921","SENG1010, SENG1020, SENG1031","2","Yes"," This course provides an introduction to software engineering principles: basic software lifecycle concepts, modern development methodologies, conceptual modeling and how these activities relate to programming. It also introduces the basic notions of team-based project management via conducting a project to design, build and deploy a simple web-based application. It is typically taken in the semester after completing COMP1511, but could be delayed and taken later. It provides essential background for the teamwork and project management required in many later courses.<br /><br />The goal of this course is to expose the students to:"
"COMP1911","Computing 1A","<a href="/faculties/2017/eng/eng.html">Faculty of Engineering</a>","<a href="http://www.cse.unsw.edu.au/">School of Computer Science and Engineering</a>","<a class='iw_tst' href='http://www.cse.unsw.edu.au/~cs1911'>www.cse.unsw.edu.au/~cs1911</a>","Sydney","Undergraduate","6","0.12500","6"," Enrolment in a non-CSE program.","","2","Yes"," <b> note: </b>An exclusion exists between COMP1911 and COMP1917.<br /><br />The objective of this course is for students to develop proficiency in programming using a high level language. Topics covered include: fundamental programming concepts, program testing and debugging, the underlying memory representation of data, programming style. Practical experience of these topics is supplied by laboratory programming exercises and assignments."
"COMP1927","Computing 2","<a href="/faculties/2017/eng/eng.html">Faculty of Engineering</a>","<a href="http://www.cse.unsw.edu.au/">School of Computer Science and Engineering</a>","<a class='iw_tst' href='http://www.cse.unsw.edu.au/~cs1927'>www.cse.unsw.edu.au/~cs1927</a>","Sydney","Undergraduate","6","0.12500","6","COMP1917 or COMP1921.","","2","Yes"," Programming in the large, abstraction and ADTs, interfaces, complexity. Data types and data structures: lists, trees, graphs; and associated algorithms. Programming assignments, laboratory exercises, formal examination. Preparation work may be available for interested students before the course starts (see course outline for details)."
"COMP2041","Software Construction: Techniques and Tools","<a href="/faculties/2017/eng/eng.html">Faculty of Engineering</a>","<a href="http://www.cse.unsw.edu.au/">School of Computer Science and Engineering</a>","<a class='iw_tst' href='http://www.cse.unsw.edu.au/~cs2041'>www.cse.unsw.edu.au/~cs2041</a>","Sydney","Undergraduate","6","0.12500","5","COMP1511 or COMP1917 or COMP1921","COMP9041","2",""," Software system decomposition and design. Overview of the software development life-cycle. Command languages. Version control and configuration management, programming for reliability. Testing and debugging techniques. Profiling and code improvement techniques. Practical work involving programming-in-the-large."
"COMP2111","System Modelling and Design","<a href="/faculties/2017/eng/eng.html">Faculty of Engineering</a>","<a href="http://www.cse.unsw.edu.au/">School of Computer Science and Engineering</a>","<a class='iw_tst' href='http://www.cse.unsw.edu.au/~cs2111'>www.cse.unsw.edu.au/~cs2111</a>","Sydney","Undergraduate","6","0.12500","4","MATH1081, and COMP1511 or COMP1917 or COMP1911","","2",""," This course introduces rigorous and formal methods for modelling system behaviour. These methods support the modelling of abstract specifications and the refinement of abstract specifications through to concrete implementations. Consistency of formal development is verified by proof obligations and formal proof. The course will cover: specification, refinement, implementation, proof obligations and proof. It builds on prerequisite knowledge from MATH1081, especially set theory and predicate logic. The course will use case-studies and assignments to develop competence. The methods developed in this course may be used in the SENG2010 and SENG2020 workshops."
"COMP2121","Microprocessors and Interfacing","<a href="/faculties/2017/eng/eng.html">Faculty of Engineering</a>","<a href="http://www.cse.unsw.edu.au/">School of Computer Science and Engineering</a>","<a class='iw_tst' href='http://www.cse.unsw.edu.au/~cs2121'>www.cse.unsw.edu.au/~cs2121</a>","Sydney","Undergraduate","6","0.12500","5","COMP1917 or COMP1921 or COMP1511 or COMP1521, or (COMP1911 and MTRN2500)","ELEC2142, MTRN3200","2",""," Instruction Set Architecture (ISA), Floating point number representation, computer arithmetic, assembly and machine language programming, machine language fundamentals; addressing modes; instruction repertoire, assembly language programming methodology, interrupts and I/O interfacing (hardware and software), serial communication, timers, analog input and output, converting analog signals to digital signals (data acquisition), taking input from a variety of sensors and driving actuators, buses and memory system, low level device drivers."
"COMP2521","Data Structures and Algorithms","<a href="/faculties/2017/eng/eng.html">Faculty of Engineering</a>","<a href="http://www.cse.unsw.edu.au/">School of Computer Science and Engineering</a>","<a class='iw_tst' href='https://www.engineering.unsw.edu.au/computer-science-engineering'>School</a>","Sydney","Undergraduate","6","0.12500","7","COMP1511 or COMP1917 or COMP1921","COMP1927","2","Yes"," The goal of this course is to deepen students' understanding of data structures and algorithms and how these can be employed effectively in the design of software systems. We anticipate that it will generally be taken in the second year of a program, but since its only pre-requisite is COMP1511, is it possible to take it in first year. It is an important course in covering a range of core data structures and algorithms that will be used in context in later courses.<br /><br /><B>Topics:</B><br />An introduction the structure, analysis and usage of a range of fundamental data types and the core algorithms that operate on them, including: algorithm analysis, sorting, searching, trees, graphs, files, algorithmic strategies, analysis and measurement of programs. Labs and programming assignments in C, using a range of Unix tools."
"COMP2911","Engineering Design in Computing","<a href="/faculties/2017/eng/eng.html">Faculty of Engineering</a>","<a href="http://www.cse.unsw.edu.au/">School of Computer Science and Engineering</a>","<a class='iw_tst' href='http://www.cse.unsw.edu.au/~cs2911'>www.cse.unsw.edu.au/~cs2911</a>","Sydney","Undergraduate","6","0.12500","5","COMP1927 or MTRN3500","","2",""," The engineering design and use of reliable and complex systems. Object orientation and design. Problem solving design methodologies: backtrack, greedy method, divide and conquer, dynamic methods. Practical assignments, laboratory exercises, formal examination."
"COMP3121","Algorithms and Programming Techniques","<a href="/faculties/2017/eng/eng.html">Faculty of Engineering</a>","<a href="http://www.cse.unsw.edu.au/">School of Computer Science and Engineering</a>","<a class='iw_tst' href='http://www.cse.unsw.edu.au/~cs3121'>www.cse.unsw.edu.au/~cs3121</a>","Sydney","Undergraduate","6","0.12500","5","COMP1927 or COMP2521 or a mark of at least 65 in COMP1921","COMP3821","2",""," Correctness and efficiency of algorithms. Computational complexity: time and space bounds. Techniques for best-case, worst-case and average-case time and space analysis. Designing algorithms using induction, divide-and-conquer and greedy strategies. Algorithms: sorting and order statistics, trees, graphs, matrices. Intractability: classes P, NP, and NP-completeness, approximation algorithms."
"COMP3131","Programming Languages and Compilers","<a href="/faculties/2017/eng/eng.html">Faculty of Engineering</a>","<a href="http://www.cse.unsw.edu.au/">School of Computer Science and Engineering</a>","<a class='iw_tst' href='http://www.cse.unsw.edu.au/~cs3131'>www.cse.unsw.edu.au/~cs3131</a>","Sydney","Undergraduate","6","0.12500","5","COMP2511 or COMP2911","","2",""," Covers the fundamental principles in programming languages and implementation techniques for compilers (emphasis on compiler front ends). Course contents include: program syntax and semantics, formal translation of programming languages, finite-state recognisers and regular expressions, context-free parsing techniques such as LL(k( and LR(k), attribute grammars, syntax-directed translation, type checking and code generation. Lab: implementation of a compiler in a modern programing language for a small programming language."
"COMP3141","Software System Design and Implementation","<a href="/faculties/2017/eng/eng.html">Faculty of Engineering</a>","<a href="http://www.cse.unsw.edu.au/">School of Computer Science and Engineering</a>","<a class='iw_tst' href='http://www.cse.unsw.edu.au/~cs3141'>www.cse.unsw.edu.au/~cs3141</a>","Sydney","Undergraduate","6","0.12500","5","COMP1927 or COMP2521 or a mark of at least 65 in COMP1921","","2",""," This course will present rigorous and formal methods for the design and implementation phases of software system development. Also considered are testing and reuse of designs. As far as possible, software tools that can assist the process will be used. The material will be presented using case studies, and students will be required to undertake a project."
"COMP3151","Foundations of Concurrency","<a href="/faculties/2017/eng/eng.html">Faculty of Engineering</a>","<a href="http://www.cse.unsw.edu.au/">School of Computer Science and Engineering</a>","<a class='iw_tst' href='http://www.cse.unsw.edu.au/~cs3151'>www.cse.unsw.edu.au/~cs3151</a>","Sydney","Undergraduate","6","0.12500","5","COMP1927, or COMP1521 and COMP2521","COMP9151","2",""," Concurrency = processes + communication. Communication via shared variables vs message passing. Models of concurrency: true concurrency vs interleaving. Abstractions: atomicity, locks and barriers, semaphores, monitors, threads, RPC, rendezvous. Classical problems: mutual exclusion, dining philosophers, sleeping barber, termination detection, gravitational N-body problem.<br />Practical work: programming assignments using the C-like language MDP."
"COMP3153","Algorithmic Verification","<a href="/faculties/2017/eng/eng.html">Faculty of Engineering</a>","<a href="http://www.cse.unsw.edu.au/">School of Computer Science and Engineering</a>","<a class='iw_tst' href='http://www.cse.unsw.edu.au/~cs3153'>www.cse.unsw.edu.au/~cs3153</a>","Sydney","Undergraduate","6","0.12500","3","COMP2521, or a mark of at least 65 in COMP1927, or a mark of at least 75 in COMP1921","","2",""," It is virtually impossible to guarantee the correctness of a system, and in turn the absense of bugs by standard software engineering practice such as code review, systematic testing and good software design alone. The formal methods community has developed various rigorous, mathematically sound techniques and tools that allow the automatic analysis of systems and software. The application of these fully automatic techniques is typically called algorithmic verification.<br /><br />The course will describe several automatic verification techniques, the algoriths they are based on, and the tools that support them. We will discuss examples to which the techniques have been applied, and provide experience with the use of several tools."
"COMP3161","Concepts of Programming Languages","<a href="/faculties/2017/eng/eng.html">Faculty of Engineering</a>","<a href="http://www.cse.unsw.edu.au/">School of Computer Science and Engineering</a>","<a class='iw_tst' href='http://www.cse.unsw.edu.au/~cs3161'>www.cse.unsw.edu.au/~cs3161</a>","Sydney","Undergraduate","6","0.12500","3","COMP2521 or COMP1927","COMP9161","2",""," Programming language paradigms: imperative, object oriented, declarative (i.e., functional and logic). Theoretical foundations of programming languages: syntax, operatational, axiomatic and denotational semantics. Implementation aspects of central language features, such as dynamic and strong typing, polymorphism, overloading and automatic memory management. Abstracting over programming languages and architectures: byte code approach, component software."
"COMP3211","Computer Architecture","<a href="/faculties/2017/eng/eng.html">Faculty of Engineering</a>","<a href="http://www.cse.unsw.edu.au/">School of Computer Science and Engineering</a>","<a class='iw_tst' href='http://www.cse.unsw.edu.au/~cs3211'>www.cse.unsw.edu.au/~cs3211</a>","Sydney","Undergraduate","6","0.12500","5","COMP3222 or ELEC2141.","","2",""," Study the architecture & organisation of modern processors, and influences upon these, with emphasis on pipelined RISC machines; gain understanding of the design of the memory subsystem, I/O, and system level interconnect; become proficient in the use of tools such as VHDL and SimpleScalar for the description, simulation, and verification of architectural designs; complete a series of assignments leading to the design, implemention, validatation and assessment of a RISC system. It is assumed students are familiar with combinational and sequential logic design principles and have some experience in the use of CAD tools to describe and simulate digital systems."
"COMP3222","Digital Circuits and Systems","<a href="/faculties/2017/eng/eng.html">Faculty of Engineering</a>","<a href="http://www.cse.unsw.edu.au/">School of Computer Science and Engineering</a>","<a class='iw_tst' href='http://www.cse.unsw.edu.au/~cs3222'>www.cse.unsw.edu.au/~cs3222</a>","Sydney","Undergraduate","6","0.12500","5","COMP2121, or (ELEC1111 or ELEC1112, and COMP1521 or COMP1927)","ELEC2141","2",""," This course aims to provide students with a knowledge of problem solving with digital systems (computer systems and digital circuits). The basic building blocks of combinational and sequential circuits are introduced to develop circuit solutions to problems and to understand and implement the design and operation of hardware models of digital and computer systems. HDLs will be used to describe circuits and state of the art computer aided design tools will be used to design complex systems."
"COMP3231","Operating Systems","<a href="/faculties/2017/eng/eng.html">Faculty of Engineering</a>","<a href="http://www.cse.unsw.edu.au/">School of Computer Science and Engineering</a>","<a class='iw_tst' href='http://www.cse.unsw.edu.au/~cs3231'>www.cse.unsw.edu.au/~cs3231</a>","Sydney","Undergraduate","6","0.12500","5","COMP1521 or COMP2121, and COMP2521 or COMP1927","","2",""," Operating System Organisation and services. Process management: scheduling, synchronisation and communication. Memory management: virtual memory, paging and segmentation. Storage management: disk scheduling, file systems. Protection and security. Distributed operating systems and file systems. Case studies: UNIX & NT. Lab: Programming assignments.<br /><br />Assumed Knowledge: C"
"COMP3311","Database Systems","<a href="/faculties/2017/eng/eng.html">Faculty of Engineering</a>","<a href="http://www.cse.unsw.edu.au/">School of Computer Science and Engineering</a>","<a class='iw_tst' href='http://www.cse.unsw.edu.au/~cs3311'>www.cse.unsw.edu.au/~cs3311</a>","Sydney","Undergraduate","6","0.12500","5","COMP1531 or COMP1927","COMP9311, INFS5992","2",""," Data models: entity-relationship, relational, object-oriented. Relational database management systems: data definition, query languages, development tools. Database application design and implementation. Architecture of relational database management systems: storage management, query processing, transaction processing. Lab: design and implementation of a database application."
"COMP3331","Computer Networks and Applications","<a href="/faculties/2017/eng/eng.html">Faculty of Engineering</a>","<a href="http://www.cse.unsw.edu.au/">School of Computer Science and Engineering</a>","<a class='iw_tst' href='http://www.cse.unsw.edu.au/~cs3331'>www.cse.unsw.edu.au/~cs3331</a>","Sydney","Undergraduate","6","0.12500","5","COMP1921 or COMP1927 or MTRN3500, or (COMP1521, and COMP2521 or MTRN3500)","","2",""," Networking technology overview. Protocol design and validation using the finite state automata in conjunction with time-lines. Overview of the IEEE802 network data link protocol standards. Addressing at the data link and network layers. Network layer services. Introduction to routing algorithms such as Distance Vector and Link State. Congestion control mechanisms. Internetworking issues in connecting networks. The Internet Protocol Suite overview. The Internet protocols IPv4 and IPv6. Address resolution using ARP and RARP. Transport layer: issues, transport protocols TCP and UDP. Application level protocols such as: File Transfer Protocol (FTP), Domain Name System (DNS) and Simple Mail Transfer Protocol (SMTP). Introduction to fundamental network security concepts, 802.11 wireless networks and peer to peer networks. There is a substantial network programming component in the assessable material."
"COMP3411","Artificial Intelligence","<a href="/faculties/2017/eng/eng.html">Faculty of Engineering</a>","<a href="http://www.cse.unsw.edu.au/">School of Computer Science and Engineering</a>","<a class='iw_tst' href='http://www.cse.unsw.edu.au/~cs3411'>www.cse.unsw.edu.au/~cs3411</a>","Sydney","Undergraduate","6","0.12500","4","COMP2521 or COMP1927","COMP9414, COMP9814","2",""," Machine intelligence. Principles: knowledge representation, automated reasoning, machine learning. Tools: AI programming languages, control methods, search strategies, pattern matching. Applications: computer vision, speech recognition, natural language processing, expert systems, game playing, computer-aided learning. Philosophical and psychological issues. Lab: logic programming assignments."
"COMP3421","Computer Graphics","<a href="/faculties/2017/eng/eng.html">Faculty of Engineering</a>","<a href="http://www.cse.unsw.edu.au/">School of Computer Science and Engineering</a>","<a class='iw_tst' href='http://www.cse.unsw.edu.au/~cs3421'>www.cse.unsw.edu.au/~cs3421</a>","Sydney","Undergraduate","6","0.12500","5","COMP2511 or COMP2911","","2",""," Graphics hardware: scan conversion of lines and polygons. 2D transformations: windowing, clipping, viewports. User interfaces. 3D transformations: perspective transformation, 3D clipping, hidden surface removal, lighting and texture maps. Hierarchical modelling of objects, modelling curves and surfaces with splines and fractals. Graphics standards. Lab: programming assignments."
"COMP3431","Robotic Software Architecture","<a href="/faculties/2017/eng/eng.html">Faculty of Engineering</a>","<a href="http://www.cse.unsw.edu.au/">School of Computer Science and Engineering</a>","<a class='iw_tst' href='http://www.cse.unsw.edu.au/~cs3431'>www.cse.unsw.edu.au/~cs3431</a>","Sydney","Undergraduate","6","0.12500","6","COMP2521 or COMP1927, and a WAM of at least 70","COMP9431","2",""," An introduction to Intelligent agent design. Picking actions using planning, learning or engineered control. Both practical and theoretical components. Practical component: Re-implement parts of a real agent architecture on a robot. Assignment based. Emphasis on engineering a working system. Theoretical component: Introduction to a variety of research agent architectures including classical planning and reinforcement learning. Lecture and lab based."
"COMP3511","Human Computer Interaction","<a href="/faculties/2017/eng/eng.html">Faculty of Engineering</a>","<a href="http://www.cse.unsw.edu.au/">School of Computer Science and Engineering</a>","<a class='iw_tst' href='http://www.cse.unsw.edu.au/~cs3511'>www.cse.unsw.edu.au/~cs3511</a>","Sydney","Undergraduate","6","0.12500","5","Completion of 48 UOC","","2","Yes"," Provides an introduction to user-system interactions, both analysis and design. The approach is cognitive, focusing on matching user goals with computer technologies. Topics: the human information processing system, models of interaction, strategies for and process of design and evaluation. Project work is emphasised."
"COMP3601","Design Project A","<a href="/faculties/2017/eng/eng.html">Faculty of Engineering</a>","<a href="http://www.cse.unsw.edu.au/">School of Computer Science and Engineering</a>","<a class='iw_tst' href='http://www.cse.unsw.edu.au/~cs3601'>www.cse.unsw.edu.au/~cs3601</a>","Sydney","Undergraduate","6","0.12500","5","COMP2121","","2",""," Embedded system design team projects. Embedded system design life cycle. Software/hardware codesign. Hardware slection process. Software development techniques. Hardware/software integration and system testing. Ethics in teams, ethics in design, IP protection, IP reuse, project report writing. Project and team managment."
"COMP3821","Extended Algorithms and Programming Techniques","<a href="/faculties/2017/eng/eng.html">Faculty of Engineering</a>","<a href="http://www.cse.unsw.edu.au/">School of Computer Science and Engineering</a>","<a class='iw_tst' href='http://www.cse.unsw.edu.au/~cs3821'>www.cse.unsw.edu.au/~cs3821</a>","Sydney","Undergraduate","6","0.12500","5","COMP2521, or a mark of at least 65 in COMP1927, or a mark of at least 75 in COMP1921","COMP3121","2",""," As for COMP3121 but in greater depth."
"COMP3891","Extended Operating Systems","<a href="/faculties/2017/eng/eng.html">Faculty of Engineering</a>","<a href="http://www.cse.unsw.edu.au/">School of Computer Science and Engineering</a>","<a class='iw_tst' href='http://www.cse.unsw.edu.au/~cs3891'>www.cse.unsw.edu.au/~cs3891</a>","Sydney","Undergraduate","6","0.12500","5","COMP1521 or COMP2121, and COMP2521 or COMP1927, and a WAM of at least 75","","2",""," As for COMP3231 Operating Systems but in greater depth and breadth.<br /><br />Assumed Knowledge: C"
"COMP3901","Special Project A","<a href="/faculties/2017/eng/eng.html">Faculty of Engineering</a>","<a href="http://www.cse.unsw.edu.au/">School of Computer Science and Engineering</a>","<a href="http://www.cse.unsw.edu.au/about-us/help-resources/for-students/student-projects/ugrdprojects/">http://www.cse.unsw.edu.au/about-us/help-resources/for-students/student-projects/ugrdprojects/</a>","Sydney","Undergraduate","6","0.12500","0","","","2",""," The student will complete a small research project under the supervision of a member of the academic staff of the School. The project will be assessed on the basis of a report written by the student."
"COMP3902","Special Project B","<a href="/faculties/2017/eng/eng.html">Faculty of Engineering</a>","<a href="http://www.cse.unsw.edu.au/">School of Computer Science and Engineering</a>","<a href="http://www.cse.unsw.edu.au/about-us/help-resources/for-students/student-projects/ugrdprojects/">http://www.cse.unsw.edu.au/about-us/help-resources/for-students/student-projects/ugrdprojects/</a>","Sydney","Undergraduate","12","0.25000","1","","","2",""," The student will complete a medium-sized research project under the supervision of a member of the academic staff of the School. The project will be assessed on the basis of report written by the student."
"COMP4121","Advanced and Parallel Algorithms","<a href="/faculties/2017/eng/eng.html">Faculty of Engineering</a>","<a href="http://www.cse.unsw.edu.au/">School of Computer Science and Engineering</a>","<a class='iw_tst' href='http://www.cse.unsw.edu.au/~cs4121'>www.cse.unsw.edu.au/~cs4121</a>","Sydney","Undergraduate","6","0.12500","4","COMP3121 or COMP3821.","","2",""," Topics chosen from: Spatial, semi-structured and multi-dimensional data storage and manipulation techniques, non Von-Neumann techniques, advanced and parallel algorithmic techniques, algorithm engineering and problem solving practices; algorithms for matrices and systems of linear equations, approximation algorithms, FFT and convolution and their software and circuit implementations, iteration methods for the solution of operator equations."
"COMP4128","Programming Challenges","<a href="/faculties/2017/eng/eng.html">Faculty of Engineering</a>","<a href="http://www.cse.unsw.edu.au/">School of Computer Science and Engineering</a>","<a class='iw_tst' href='http://www.cse.unsw.edu.au/~cs4128'>http://www.cse.unsw.edu.au/~cs4128</a>","Sydney","Undergraduate","6","0.12500","0","","","2",""," The focus of the course is the development and implementation of advanced algorithms. Students will learn to select appropriate algorithms for a given problem, integrate multiple algorithms for solving a complex problem, design new algorithms, and implement them. Algorithms covered include dynamic programming, shortest path, max flow, suffix trees, and combinatorial algorithms. They will also learn skills required for programming contests, which include evaluation of problem difficulty, solving problems in teams, and work under time pressure."
"COMP4141","Theory of Computation","<a href="/faculties/2017/eng/eng.html">Faculty of Engineering</a>","<a href="http://www.cse.unsw.edu.au/">School of Computer Science and Engineering</a>","<a class='iw_tst' href='http://www.cse.unsw.edu.au/~cs4141'>www.cse.unsw.edu.au/~cs4141</a>","Sydney","Undergraduate","6","0.12500","4","COMP1927 or MATH2301.","","2",""," Computability: formal languages and problems, Turing Machines (TMs), computability, (semi-)decidability, universal TMs, Church-Turing thesis, halting problem, reduction and undecidability proofs, examples; Complexity: run time, space, complexity classes, non-determinism and NP, polynomial reductions and NP completeness, optimisation problems and approximation, randomisation; Languages and Automata: regular expressions and languages, finite automata, determinisation, context-free grammars and languages (CFLs), Chomsky normal form, word problems, pumping lemma, push-down automata, decidability problems for CFLs; Semantics and Correctness: while programs, assertions and program correctness, Hoare logic, loops and loop invariants, relative completeness of Hoare logic (and its role in a proof of Gödel's incompleteness result)"
"COMP4161","Advanced Topics in Software Verification","<a href="/faculties/2017/eng/eng.html">Faculty of Engineering</a>","<a href="http://www.cse.unsw.edu.au/">School of Computer Science and Engineering</a>","<a class='iw_tst' href='http://www.cse.unsw.edu.au/~cs4161'>www.cse.unsw.edu.au/~cs4161</a>","Sydney","Undergraduate","6","0.12500","3","Completion of 48 UOC","","2",""," This course is about mechanical proof assistants, how they work, and what they can be used for. It presents specification and proof techniques used in industrial grade theorem provers, teaches the theoretical background to the techniques involved, and shows how to use a theorem prover to conduct formal proofs in practice. The courses is intended to bring third/fourth year and postgraduate students into contact with teh current research topics in the field of theorem proving and automated deduction and to teach them the necessary skills to sucessfully use industrial grade verification environments in modelling and verification.<br /><br />Topics covered included: higher order logic, natural deduction, lambda calculus, term rewriting, data types and recursive functions, induction principles, calculational reasoning, mathematical proofs, decision procedures for a variety of logical domains, and proofs about programs.<br /><br />Note: experience with (first-order) logic and functional programming is required."
"COMP4181","Language-based Software Safety","<a href="/faculties/2017/eng/eng.html">Faculty of Engineering</a>","<a href="http://www.cse.unsw.edu.au/">School of Computer Science and Engineering</a>","<a class='iw_tst' href='http://www.cse.unsw.edu.au/~cs4181'>www.cse.unsw.edu.au/~cs4181</a>","Sydney","Undergraduate","6","0.12500","3","COMP2521 or COMP1927","COMP9181","2",""," Trust in the safety and security of software systems is increasingly important with the use of software in systems where failure or sabotage can lead to loss of life or be very expensive (this includes medical and financial applications as well as software used for power grids, amss transport systems, and security infrastructure). This course covers language based safety engineering techniques advanced type systems, specification-based test generators, domain-specific languages, and prototyping for high-assurance. It demonstrates via concrete examples, including security infrastructure software, how modern functional languages are used to achieve high assurance, and conveys hands-on experience via practical assignments."
"COMP4336","Mobile Data Networking","<a href="/faculties/2017/eng/eng.html">Faculty of Engineering</a>","<a href="http://www.cse.unsw.edu.au/">School of Computer Science and Engineering</a>","<a class='iw_tst' href='http://www.cse.unsw.edu.au/~cs4336'>www.cse.unsw.edu.au/~cs4336</a>","Sydney","Undergraduate","6","0.12500","5","COMP3331.","","2",""," This course will examine how mobility affects networks, systems, and applications. It will teach advanced concepts and protocols for managing mobility in TCP/IP networks, improving spectrum and energy efficiency of mobile networking, realizing more direct form of device-to-device communication, enhancing the quality of experience of mobile video, and achieving self-powered wireless communication. Learning emerging device functionalities and features will be part of this course, which requires some basic understanding of mobile device programming, such as Android and Java."
"COMP4337","Securing Wireless Networks","<a href="/faculties/2017/eng/eng.html">Faculty of Engineering</a>","<a href="http://www.cse.unsw.edu.au/">School of Computer Science and Engineering</a>","<a class='iw_tst' href='http://www.cse.unsw.edu.au/~cs4337'>www.cse.unsw.edu.au/~cs4337</a>","Sydney","Undergraduate","6","0.12500","5","COMP3331.","","2",""," As wireless technology emerges into the mainstream of the networking and communications markets, security becomes a top priority. This course will explore the security vulnerabilities in wireless networks and cover the fundamental concepts and advanced issues for building sensor networks. The following key concepts will be covered: Wireless LAN Security - Wired Equivalent Privacy (WEP), Wi-Fi Protected Access (WPA), Authentication Servers (RADIUS), 802.11i security standard; Securing Ad-Hoc Networks - MAC layer misbehaviours, secure routing protocols, denial of service attacks, key management, broadcast authentication, secure location discovery, non-traditional security attacks and solutions. This course includes a hands-on laboratory component and a design project."
"COMP4418","Knowledge Representation and Reasoning","<a href="/faculties/2017/eng/eng.html">Faculty of Engineering</a>","<a href="http://www.cse.unsw.edu.au/">School of Computer Science and Engineering</a>","<a class='iw_tst' href='http://www.cse.unsw.edu.au/~cs4418'>www.cse.unsw.edu.au/~cs4418</a>","Sydney","Undergraduate","6","0.12500","3","COMP3411 or COMP4415","","2",""," Knowledge Representation and Reasoning (KRR) is at the core of Artificial Intelligence. It is concerned with the representation of knowledge in symbolic form and the use of this knowledge for reasoning. This course presents current trends and research issues in Knowledge Representation and Reasoning (KRR). It enables students interested in Artificial Intelligence to deepen their knowledge in this important area and gives them a solid background for doing their own work/research in this area. The topics covered in more detail are AI Logics, Probablilistic Reasoning, Constraints, and Game Theory."
"COMP4601","Design Project B","<a href="/faculties/2017/eng/eng.html">Faculty of Engineering</a>","<a href="http://www.cse.unsw.edu.au/">School of Computer Science and Engineering</a>","<a class='iw_tst' href='http://www.cse.unsw.edu.au/~cs4601'>www.cse.unsw.edu.au/~cs4601</a>","Sydney","Undergraduate","6","0.12500","5","COMP3211 and COMP3601.","","2",""," Hardware design and systems prototyping using field-programmable gate arrays. Emphasises laboratory experience in programming and interfacing with FPGAs. Acceleration of soft-core processors, design of custom accelerator blocks and configurable logic-based applications from areas such as telecommunications, signal processing, cryptography and biological sequencing. Techniques for designing and implementing configurable systems. CAD challenges posed by the area. Design validation, performance analysis and power consumption. Reconfigurable systems."
"COMP4904","Industrial Training 1","<a href="/faculties/2017/eng/eng.html">Faculty of Engineering</a>","<a href="http://www.cse.unsw.edu.au/">School of Computer Science and Engineering</a>","<a class='iw_tst' href='http://www.cse.unsw.edu.au/undergrad/programs/cscoop.html'>www.cse.unsw.edu.au/undergrad/programs/cscoop.html</a>","Sydney","Undergraduate","18","0.37500","0","72uc completed in Computer Science Co-op program.","","2",""," <i><strong>Please Note:</strong> Co-op students are not liable for tuition fee charges for this course.</i><br /><br />This is the first Industrial Training placement for Computer Science Co-op scholars. Students undertake a six month placement with a sponsor company. Students must provide a report on their experience at the end of the placement."
"COMP4905","Industrial Training 2","<a href="/faculties/2017/eng/eng.html">Faculty of Engineering</a>","<a href="http://www.cse.unsw.edu.au/">School of Computer Science and Engineering</a>","<a class='iw_tst' href='http://www.cse.unsw.edu.au/undergrad/programs/cscoop.html'>www.cse.unsw.edu.au/undergrad/programs/cscoop</a>","Sydney","Undergraduate","15","0.31250","0","COMP4904","","2",""," <i><strong>Please Note:</strong> Co-op students are not liable for tuition fee charges for this course.</i><br /><br />This is the second Industrial Training placement for Computer Science Co-op scholars. Students undertake a six month placement with a sponsor company. Students must provide a report on their experience at the end of the placement."
"COMP4906","Industrial Training 3","<a href="/faculties/2017/eng/eng.html">Faculty of Engineering</a>","<a href="http://www.cse.unsw.edu.au/">School of Computer Science and Engineering</a>","<a class='iw_tst' href='http://www.cse.unsw.edu.au/undergrad/programs/cscoop.html'>www.cse.unsw.edu.au/undergrad/programs/cscoop</a>","Sydney","Undergraduate","15","0.31250","0","","","2",""," <i><strong>Please Note:</strong> Co-op students are not liable for tuition fee charges for this course.</i><br /><br />This is the third Industrial Training placement for Computer Science Co-op scholars. Students undertake a six month placement with a sponsor company. Students must provide a report on their experience at the end of the placement."
"COMP4910","Thesis Part A","","","","","","","","","","","","",""
"COMP4911","Thesis Part B","","","","","","","","","","","","",""
"COMP4920","Management and Ethics","<a href="/faculties/2017/eng/eng.html">Faculty of Engineering</a>","<a href="http://www.cse.unsw.edu.au/">School of Computer Science and Engineering</a>","<a class='iw_tst' href='http://www.cse.unsw.edu.au/~cs4920'>www.cse.unsw.edu.au/~cs4920</a>","Sydney","Undergraduate","6","0.12500","4","COMP2511 or COMP2911, and in the final year of the BSc Computer Science or BE / BE (Hons) Bioinformatics Engineering or Computer Engineering. Software Engineering students enrol in SENG4920.","BINF4920, COMP2920, SENG4920, SENG4921","1",""," This course will develop a framework on which management and ethical issues can be developed. and also develop skills in software project management.<br /><br />Topics covered will include management issues such as:"
"COMP4930","Thesis Part A","<a href="/faculties/2017/eng/eng.html">Faculty of Engineering</a>","<a href="http://www.cse.unsw.edu.au/">School of Computer Science and Engineering</a>","<a class='iw_tst' href='http://www.cse.unsw.edu.au/thesis/'>www.cse.unsw.edu.au/thesis</a>","Sydney","Undergraduate","6","0.12500","5"," Enrolment in Bachelor of Science (Honours) program 4515, or 126 units of credit completed in BE Computer Engineering, BE Bioinformatics or Bioinformatics Engineering, or BE (Honours) Software Engineering.","","2",""," Thesis part A and B are done in the last two semesters of the BE degree program. For full-time students, a nominal three hours per week in the first semester and fifteen hours per week in the second semester are devoted to directed laboratory and research work on an approved course under guidance of members of the academic staff. Usually, the Thesis involves the design and construction of experimental apparatus and/or software, together with appropriate testing and evaluation. For Part A, students are required to present a satisfactory seminar. For Part B, a written thesis must be submitted by the Tuesday of the final week of the semester."
"COMP4931","Thesis Part B","<a href="/faculties/2017/eng/eng.html">Faculty of Engineering</a>","<a href="http://www.cse.unsw.edu.au/">School of Computer Science and Engineering</a>","<a class='iw_tst' href='http://www.cse.unsw.edu.au/thesis/'>www.cse.unsw.edu.au/thesis</a>","Sydney","Undergraduate","6","0.12500","5","COMP4930. Excluded: Program 4515.","BINF4911, BIOM5921, BIOM5951, BIOM5961, BIOM5971, COMP4911, COMP4941, SENG4911","2",""," Thesis part A and B are done in the last two semesters of the BE degree program. For full-time students, a nominal three hours per week in the first semester and fifteen hours per week in the second semester are devoted to directed laboratory and research work on an approved course under guidance of members of the academic staff. Usually, the Thesis involves the design and construction of experimental apparatus and/or software, together with appropriate testing and evaluation. For Part A, students are required to present a satisfactory seminar. For Part B, a written thesis must be submitted by the Tuesday of the final week of the semester."
"COMP4941","Thesis Part B","<a href="/faculties/2017/eng/eng.html">Faculty of Engineering</a>","<a href="http://www.cse.unsw.edu.au/">School of Computer Science and Engineering</a>","<a class='iw_tst' href='http://www.cse.unsw.edu.au/thesis/'>www.cse.unsw.edu.au/thesis</a>","Sydney","Undergraduate","12","0.25000","0","COMP4930 and [75 WAM or enrolment in Computer Science Honours]","BINF4911, BIOM5921, BIOM5951, BIOM5961, BIOM5971, COMP4911, COMP4931, SENG4911","2",""," This course in conjunction with Thesis part A (COMP4930) constitutes an 18 UoC advanced thesis option for excellent students and is suitable for those students desiring a more intensive research experience. The advanced thesis option may describe a higher level directed research work on an approved topic.<br /><br />Advanced thesis students must submit a draft manuscript for submission to a scientific conference or journal appropriate for the discipline along with their final thesis report."
"COMP6441","Security Engineering and Cyber Security","<a href="/faculties/2017/eng/eng.html">Faculty of Engineering</a>","<a href="http://www.cse.unsw.edu.au/">School of Computer Science and Engineering</a>","<a href="http://www.cse.unsw.edu.au/~cs6441">http://www.cse.unsw.edu.au/~cs6441</a>","Sydney","Undergraduate","6","0.12500","4","Completion of 48 UOC","COMP3441, COMP6841, COMP9441","2","Yes"," Introduction to computer security, prevention of cybercrime and cyberterror. The principles of engineering secure systems. How to think like a security engineer.<br /><br />Engineering secure systems. How security fails. Security analysis and design. Private and public cryptographic protocols. Introduction to information security: Confidentiality, Integrity, Authentication, Non-repudiation, hashing, signatures, bits of security. Physical security, social engineering, sniffing, intrusion detection, prevention and response, firewalls, honeypots. Overview of vulnerabilities and exploits including areas such as buffer overflow, inter overflow, heap attacks, Return-Oriented-Programming, heap attacks. Principles of risk and security. Case studies drawn from the history of hacking and from current events.<br /><br />Additional topics drawn from recent developments and current research in applied computer security.<br /><br />There are numerous formative assessments and activities throughout the course to provide feedback and learning opportunities. These do not directly contribute to your final grade but are expected to be used to provide evidence of your capabilities in your portfolio.<br /><br />A programming background is not required but it will be helpful in some of the more applied topics. Students need a keen devious and analytical mind. To get the most from this course students will need to engage in independent study and research and be able to act as independent self-directed learners."
"COMP6443","Web Application Security and Testing","<a href="/faculties/2017/eng/eng.html">Faculty of Engineering</a>","<a href="http://www.cse.unsw.edu.au/">School of Computer Science and Engineering</a>","<a href="http://www.cse.unsw.edu.au/~cs6443">http://www.cse.unsw.edu.au/~cs6443</a>","Sydney","Undergraduate","6","0.12500","5","COMP6441 or COMP6841 or COMP3441 or COMP9321","COMP6843","2","Yes"," Web applications are currently the predominant source of software vulnerabilities exploited in in online attacks. There is a growing need and growing demand for web programmers to be security aware.<br /><br />This course covers the main types of web application vulnerabilities and current best practice professional coding and testing practices to be able to successfully develop secure web applications.<br /><br />The course covers OWASP vulnerabilities cross site scripting browser security model and weaknesses Injection attacks DNS Man in the middle Data leakage Spoofing UI and Social vulnerabilities Assurance and Testing Standards. Course coverage will be constantly updated over time to reflect emerging vulnerabilities and practices.<br /><br />A programming background is not required but it will be helpful in some of the more applied topics. Students need a keen devious and analytical mind. To get the most from this course students will need to engage in independent study and research and be able to act as independent self directed learners."
"COMP6445","Digital Forensics","<a href="/faculties/2017/eng/eng.html">Faculty of Engineering</a>","<a href="http://www.cse.unsw.edu.au/">School of Computer Science and Engineering</a>","<a class='iw_tst' href='https://www.engineering.unsw.edu.au/computer-science-engineering'>School</a>","Sydney","Undergraduate","6","0.12500","5","COMP3441 or COMP6441 or COMP6841, and COMP3231 or COMP3891","COMP6845","2","Yes"," This course addresses the skills and knowledge needed by first responders to a discovered cyber breech, as well as law enforcement and criminal justice.<br /><br />This course covers both forensic theory / professional practice, and looking at the underlying engineering of hiding, finding, interpreting and responding to traces. Students will use of standard forensic tools to extract carve and analyse data as well as learning the low level technical skills and knowledge underlying them. By the end of the course students should be able to write and analyse simple forensic tools as well as being able to use them.<br /><br />The course covers Memory Forensics, Disc Forensics Network, Device Forensics, Stealth Techniques, Anti-forensics, Professional Forensic Practice, (chain of custody, records etc), Logging. Course coverage will be constantly updated over time to reflect emerging forensic practice and methods."
"COMP6448","Security Engineering Masterclass","<a href="/faculties/2017/eng/eng.html">Faculty of Engineering</a>","<a href="http://www.cse.unsw.edu.au/">School of Computer Science and Engineering</a>","<a class='iw_tst' href='https://www.engineering.unsw.edu.au/computer-science-engineering'>School</a>","Sydney","Undergraduate","6","0.12500","30","COMP6841","","2","Yes"," This is an occasional course that will involve a visiting expert in the security area giving a series of lectures and workshops on an advanced topic in cyber security. The precise timing and topics depend on the visitor. The course will be run in intensive mode."
"COMP6714","Information Retrieval and Web Search","<a href="/faculties/2017/eng/eng.html">Faculty of Engineering</a>","<a href="http://www.cse.unsw.edu.au/">School of Computer Science and Engineering</a>","<a href="http://www.cse.unsw.edu.au/~cs6714">http://www.cse.unsw.edu.au/~cs6714</a>","Sydney","Undergraduate","6","0.12500","3","MATH1081 and COMP2041","","2",""," Information Retrieval: (a) Document modeling (b) Inverted index construction and compression (c)Vector space model and ranking methods (d) Probabilistic and language models (e) Evaluation methods (f) Relevance feedback and query expansion.<br /><br />Web Search: (a) Web search engine architecture (b) Web crawling and indexing (c) Web structure and usage analytics.<br /><br />The lecture materials will be complemented by projects and assignments."
"COMP6733","Internet of Things Experimental Design Studio","<a href="/faculties/2017/eng/eng.html">Faculty of Engineering</a>","<a href="http://www.cse.unsw.edu.au/">School of Computer Science and Engineering</a>","<a class='iw_tst' href='http://www.cse.unsw.edu.au/~cs6733'>www.cse.unsw.edu.au/~cs6733</a>","Sydney","Undergraduate","6","0.12500","5","65 WAM and COMP3331","COMP4335, COMP9335","2",""," Internet of Things (IoT) will play a key role in the next frontier of computing. The new course will provide an experimental approach to cover fundamental design principles behind building IoT applications, with hands-on experience with a popular end-to-end IoT platform.Topics covered will include a selection from: IoT technology and services, IoT system architecture, Low Power communications (Bluetooth Low Energy and 6LoWPAN) and security issues, sensors and sensor data smoothing and filtering, light-weight in-situ machine learning and data fusion, inertial sensing, activity recognition and fitness morning, voice-based stress level sensing, biometric authentication, anonymity, cloud services for IoT. This course assumes familiarity with a high level programming language such as Java and Python AND a low level programming language such as C."
"COMP6741","Parameterized and Exact Computation","<a href="/faculties/2017/eng/eng.html">Faculty of Engineering</a>","<a href="http://www.cse.unsw.edu.au/">School of Computer Science and Engineering</a>","<a href="http://www.cse.unsw.edu.au/~cs6741">http://www.cse.unsw.edu.au/~cs6741</a>","Sydney","Undergraduate","6","0.12500","3","COMP3121 or COMP3821.","","2",""," The course focuses on algorithms for exactly solving NP-hard computational problems. Since no polynomial time algorithm is known for any of these problems, the running time of the algorithms will have a super-polynomial dependence on the input size or some other parameter of the input.<br /><br /><br />The first part presents algorithmic techniques to solve NP-hard problems provably faster than brute-force in the worst case, such as branching algorithms, dynamic programming across subsets, inclusion-exclusion, local search, and measure & conquer. We will also see lower bounds for algorithms and how to rule out certain running times assuming the (Strong) Exponential Time Hypothesis.<br /><br /><br />Whereas the first part presents "default" algorithms that one would use without knowing much about the instances one is about to solve, the second part acknowledges that the complexity of an instance does not only depend on its size n. A parameter k is associated with each instance and the parameterized complexity framework aims at designing fixed-parameter algorithms whose running times are f(k)*poly(n) for a computable function f. This gives efficient algorithms for small values of the parameter obtained via techniques such as branching, colour coding, iterative compression, and kernelization (preprocessing). We will also see problems that are not fixed-parameter tractable and not kernelizable to polynomial kernels subject to complexity-theoretic assumptions."
"COMP6771","Advanced C++ Programming","<a href="/faculties/2017/eng/eng.html">Faculty of Engineering</a>","<a href="http://www.cse.unsw.edu.au/">School of Computer Science and Engineering</a>","<a href="http://www.cse.unsw.edu.au/~cs6771">http://www.cse.unsw.edu.au/~cs6771</a>","Sydney","Undergraduate","6","0.12500","4","COMP2511 or COMP2911","COMP3171, COMP9171","2",""," This course introduces the fundamentals and advanced techniques of object-oriented programming in C++.<br /><br />Object-oriented inheritance techniques. Advanced techniques with functions. Memory and resource managment. Namespaces. Run time type information. Templates and generic programming. C++ Template metaprogramming. The Standard Template Library (e.g., algorithms, containers and iterators). Input/Output wth C++ iostreams library. Exception handling. C++ and Efficiency issues. Effective C++ design guidelines."
"COMP6841","Extended Security Engineering and Cyber Security","<a href="/faculties/2017/eng/eng.html">Faculty of Engineering</a>","<a href="http://www.cse.unsw.edu.au/">School of Computer Science and Engineering</a>","<a href="http://www.cse.unsw.edu.au/~cs6841">http://www.cse.unsw.edu.au/~cs6841</a>","Sydney","Undergraduate","6","0.12500","5","Completion of 48 UOC, and COMP1927 or COMP2521","COMP3441, COMP6441, COMP9441","2","Yes"," Introduction to computer security, cybercrime, and cyberterror. The principles of engineering secure systems. How to think like a security engineer.<br /><br />Engineering secure systems. How security fails. Security analysis and design. Private and public cryptographic protocols. Introduction to information security: Confidentiality, Integrity, Authentication, Non-repudiation, hashing, signatures, bits of security. Physical security, social engineering, sniffing, intrusion detection, prevention and response, firewalls, honeypots. Overview of vulnerabilities and exploits including areas such as buffer overflow, inter overflow, heap attacks, Return-Oriented-Programming, heap attacks. Principles of risk and security. Case studies drawn from the history of hacking and from current events.<br /><br />Additional topics drawn from recent developments and current research in applied computer security.<br /><br />There are numerous formative assessments and activities throughout the course to provide feedback and learning opportunities. These do not directly contribute to your final grade but are expected to be used to provide evidence of your capabilities in your portfolio.<br /><br />A programming background is required , especially for the more applied topics. Students need a keen devious and analytical mind. To get the most from this course students will need to engage in independent study and research and be able to act as independent self-directed learners.<br /><br />This is the extended version of COMP6441. In addition to the COMP6441 material above, this course includes coverage of reversing x86 machine code into C/C++ and an introduction to malware decomposition and analysis"
"COMP6843","Extended Web Application Security and Testing","<a href="/faculties/2017/eng/eng.html">Faculty of Engineering</a>","<a href="http://www.cse.unsw.edu.au/">School of Computer Science and Engineering</a>","<a href="http://www.cse.unsw.edu.au/~cs6843">http://www.cse.unsw.edu.au/~cs6843</a>","Sydney","Undergraduate","6","0.12500","6","COMP6441 or COMP6841 or COMP3441 or COMP9321","COMP6443","2",""," Web applications are currently the predominant source of software vulnerabilities exploited in in online attacks. There is a growing need and growing demand for web programmers to be security aware.<br /><br />This course covers the main types of web application vulnerabilities and current best practice professional coding and testing practices to be able to successfully develop secure web applications.<br /><br />The course covers OWASP vulnerabilities cross site scripting browser security model and weaknesses Injection attacks DNS Man in the middle Data leakage Spoofing UI and Social vulnerabilities Assurance and Testing Standards. Course coverage will be constantly updated over time to reflect emerging vulnerabilities and practices.<br /><br />There are numerous formative assessments and activities throughout the course to provide feedback and learning opportunities. These do not directly contribute to your final grade but are expected to be used to provide evidence of your capabilities in your portfolio.<br /><br />A programming background is required. Students also need a keen devious and analytical mind. To get the most from this course students will need to engage in independent study and research and be able to act as independent self directed learners.<br /><br />This is the extended version of COMP6443. This course includes the material of COMP6443 plus penetration testing, and red teaming. Students will work in teams to conduct penetration tests and report on them to real and simulated clients."
"COMP6845","Extended Digital Forensics and Incident Response","<a href="/faculties/2017/eng/eng.html">Faculty of Engineering</a>","<a href="http://www.cse.unsw.edu.au/">School of Computer Science and Engineering</a>","<a class='iw_tst' href='https://www.engineering.unsw.edu.au/computer-science-engineering'>School</a>","Sydney","Undergraduate","6","0.12500","6","COMP3441 or COMP6441 or COMP6841, and COMP3231 or COMP3891","COMP6445","2",""," This course addresses the skills and knowledge needed by first responders to a discovered cyber breech, as well as law enforcement and criminal justice.<br /><br />This course covers both forensic theory / professional practice, and looking at the underlying engineering of hiding, finding, interpreting and responding to traces. Students will use of standard forensic tools to extract carve and analyse data as well as learning the low level technical skills and knowledge underlying them. By the end of the course students should be able to write and analyse simple forensic tools as well as being able to use them.<br /><br />The course covers Memory Forensics, Disc Forensics Network, Device Forensics, Stealth Techniques, Anti-forensics, Professional Forensic Practice, (chain of custody, records etc), Logging. Course coverage will be constantly updated over time to reflect emerging forensic practice and methods.<br /><br />This is the extended version of COMP6445. This course includes the material of COMP6445 plus malware analysis and incident response."
"COMP9020","Foundations of Computer Science","","","","","","","","","","","","",""
"COMP9021","Principles of Programming","","","","","","","","","","","","",""
"COMP9024","Data Structures and Algorithms","","","","","","","","","","","","",""
"COMP9032","Microprocessors and Interfacing","","","","","","","","","","","","",""
"COMP9041","Software Construction: Techniques and Tools","","","","","","","","","","","","",""
"COMP9101","Design and Analysis of Algorithms","","","","","","","","","","","","",""
"COMP9102","Programming Languages and Compilers","","","","","","","","","","","","",""
"COMP9151","Foundations of Concurrency","","","","","","","","","","","","",""
"COMP9153","Algorithmic Verification","","","","","","","","","","","","",""
"COMP9161","Concepts of Programming Languages","","","","","","","","","","","","",""
"COMP9181","Language-based Software Safety","","","","","","","","","","","","",""
"COMP9201","Operating Systems","","","","","","","","","","","","",""
"COMP9211","Computer Architecture","","","","","","","","","","","","",""
"COMP9222","Digital Circuits and Systems","","","","","","","","","","","","",""
"COMP9242","Advanced Operating Systems","<a href="/faculties/2017/eng/eng.html">Faculty of Engineering</a>","<a href="http://www.cse.unsw.edu.au/">School of Computer Science and Engineering</a>","<a class='iw_tst' href='http://www.cse.unsw.edu.au/~cs9242'>www.cse.unsw.edu.au/~cs9242</a>","Sydney","Undergraduate","6","0.12500","4","a mark of at least 75 in either COMP3231 or COMP3891.","","2",""," Covers operating systems design and implementation issues at an advanced level, focussing on specific issues such as performance and on current OS research areas. Topics selected from: Microkernels; user-level servers; performance; kernel implementation; device drivers; scheduling for real-time; effects and control of hardware caches; security and protection; persistent systems; security; dealing with large, sparse address spaces; experimental systems. A laboratory running a state-of-the-art microkernal system will be used to provide hands-on experience with low-level implementation of OS components."
"COMP9243","Distributed Systems","<a href="/faculties/2017/eng/eng.html">Faculty of Engineering</a>","<a href="http://www.cse.unsw.edu.au/">School of Computer Science and Engineering</a>","<a class='iw_tst' href='http://www.cse.unsw.edu.au/~cs9243'>www.cse.unsw.edu.au/~cs9243</a>","Sydney","Undergraduate","6","0.12500","3","[COMP3231 or COMP3891] and [COMP3331 or TELE3018].","","2",""," A detailed coverage of distributed systems, with a particular focus on operating systems issues: client-server paradigm, remote-procedure call as OS support for client-server; distributed shared memory, distributed memory coherency; distributed file systems; distributed process management, including load sharing and process migration; concurrency control; fault tolerance, recoverability and distributed transactions; naming; industry standards; case studies."
"COMP9283","Extended Operating Systems","","","","","","","","","","","","",""
"COMP9311","Database Systems","","","","","","","","","","","","",""
"COMP9313","Big Data Management","","","","","","","","","","","","",""
"COMP9318","Data Warehousing and Data Mining","<a href="/faculties/2017/eng/eng.html">Faculty of Engineering</a>","<a href="http://www.cse.unsw.edu.au/">School of Computer Science and Engineering</a>","<a class='iw_tst' href='http://www.cse.unsw.edu.au/~cs9318'>www.cse.unsw.edu.au/~cs9318</a>","Sydney","Undergraduate","6","0.12500","3","COMP1927 or COMP2521, and COMP3311","","2",""," Data Warehouse: (a) Data Model for Data Warehouses. (b) Implementing Data Warehouses: data extraction, cleansing, transformation and loading, data cube computation, materialized view selection, OLAP query processing. Data Mining: (a) Fundamentals: data mining process and system architecture, relationship with data warehouse and OLAP systems, data pre-processing. (b) Mining Techniques and Application: association rules, mining spatial databases, mining multimedia databases, web mining, mining sequence and time-series data, text mining, etc. The lecture materials will be complemented by projects /assignments."
"COMP9319","Web Data Compression and Search","<a href="/faculties/2017/eng/eng.html">Faculty of Engineering</a>","<a href="http://www.cse.unsw.edu.au/">School of Computer Science and Engineering</a>","<a class='iw_tst' href='http://www.cse.unsw.edu.au/~cs9319'>www.cse.unsw.edu.au/~cs9319</a>","Sydney","Undergraduate","6","0.12500","5","COMP2521 or COMP1927","","2",""," Data Compression:"
"COMP9321","Web Applications Engineering","<a href="/faculties/2017/eng/eng.html">Faculty of Engineering</a>","<a href="http://www.cse.unsw.edu.au/">School of Computer Science and Engineering</a>","<a class='iw_tst' href='http://www.cse.unsw.edu.au/~cs9321'>www.cse.unsw.edu.au/~cs9321</a>","Sydney","Undergraduate","6","0.12500","3","COMP1531 and COMP2041, or (COMP3311, and COMP2911 or COMP2511)","","2",""," The goal of this course is to expose students to basic infrastructure for building web-based ecommerce applications. It discusses web application development techniques and enabling technologies including CGI scripts, remote method invocation, servlets, JSPs, Web access to databases, programmatic access to XML documents. The lecture materials will be complemented by several assignments and labs."
"COMP9322","Service-Oriented Architectures","<a href="/faculties/2017/eng/eng.html">Faculty of Engineering</a>","<a href="http://www.cse.unsw.edu.au/">School of Computer Science and Engineering</a>","<a class='iw_tst' href='http://www.cse.unsw.edu.au/~cs9322'>www.cse.unsw.edu.au/~cs9322</a>","Sydney","Undergraduate","6","0.12500","3","COMP9321.","","2",""," This course covers principles, techniques, architectures, and enabling technologies for the development of the different components and layers of complex e-commerce systems (presentation and personalization layer, business logic, message exchange). It discusses: (1) e-commerce transaction models, system architectures and functions, (2) enterprise applications development using J2EEE, (3) Web services and business process modelling, (4) security, transaction, payment protocols for enterprise applications, (5) e-catalogues, (6) inter-enterprise message exchange, and (6) personalization. The lecture materials will be complemented by several assignments and labs"
"COMP9323","e-Enterprise Project","<a href="/faculties/2017/eng/eng.html">Faculty of Engineering</a>","<a href="http://www.cse.unsw.edu.au/">School of Computer Science and Engineering</a>","<a class='iw_tst' href='http://www.cse.unsw.edu.au/~cs9323'>www.cse.unsw.edu.au/~cs9323</a>","Sydney","Undergraduate","6","0.12500","3","","","2",""," This course covers principles, techniques, architectures, and enabling technologies for the development of the different components and layers of complex e-Commerce systems (presentation and personalisation layer, business logic, message exchange). In particular, it discusses the processes related to (1) building a large enterprise system in collaboration with other project members, (2) developing software in a culture of participation, (3) developing software using agile software engineering methodologies, (4) integrating a number of separate components to build an integrated system, and (5) developing appropriate testing strategies and methodologies for given projects."
"COMP9331","Computer Networks and Applications","","","","","","","","","","","","",""
"COMP9334","Capacity Planning of Computer Systems and Networks","<a href="/faculties/2017/eng/eng.html">Faculty of Engineering</a>","<a href="http://www.cse.unsw.edu.au/">School of Computer Science and Engineering</a>","<a class='iw_tst' href='http://www.cse.unsw.edu.au/~cs9334'>www.cse.unsw.edu.au/~cs9334</a>","Sydney","Undergraduate","6","0.12500","3","COMP1511 or COMP1917 or COMP1921","","2",""," Techniques for performance evaluation of distributed systesms. These techniques will then be applied to designing systems to have good performance, and to the analysis of future workloads and the system changes required to cope with them."
"COMP9336","Mobile Data Networking","","","","","","","","","","","","",""
"COMP9337","Securing Wireless Networks","","","","","","","","","","","","",""
"COMP9414","Artificial Intelligence","","","","","","","","","","","","",""
"COMP9415","Computer Graphics","","","","","","","","","","","","",""
"COMP9417","Machine Learning and Data Mining","<a href="/faculties/2017/eng/eng.html">Faculty of Engineering</a>","<a href="http://www.cse.unsw.edu.au/">School of Computer Science and Engineering</a>","<a class='iw_tst' href='http://www.cse.unsw.edu.au/~cs9417'>www.cse.unsw.edu.au/~cs9417</a>","Sydney","Undergraduate","6","0.12500","3","COMP1927","","2",""," Machine learning is the algorithmic approach to learning from data. This course covers the key techniques in data mining technology, gives their theoretical background and shows their application. Topics include: decision tree algorithms (such as C4.5), regression and model tree algorithms, neural network learning, rule learning (such as association rules), lazy learning, version spaces, evaluating the performance of machine learning algorithms, Bayesian learning and model selection, algorithm-independent learning, ensemble learning, kernel methods, unsupervised learning (such as clustering) and inductive logic programming (relational learning)"
"COMP9418","Advanced Topics in Statistical Machine Learning","","","","","","","","","","","","",""
"COMP9431","Robotic Software Architecture","","","","","","","","","","","","",""
"COMP9444","Neural Networks and Deep Learning","<a href="/faculties/2017/eng/eng.html">Faculty of Engineering</a>","<a href="http://www.cse.unsw.edu.au/">School of Computer Science and Engineering</a>","<a class='iw_tst' href='http://www.cse.unsw.edu.au/~cs9444'>www.cse.unsw.edu.au/~cs9444</a>","Sydney","Undergraduate","6","0.12500","3","COMP1927 or COMP2521 or MTRN3500","COMP9844","2",""," Topics chosen from: perceptrons, feedforward neural networks, backpropagation, Hopfield and Kohonen networks, restricted Boltzmann machine and autoencoders, deep convolutional networks for image processing; geometric and complexity analysis of trained neural networks; recurrent networks, language processing, semantic analysis, long short term memory; designing successful applications of neural networks; recent developments in neural networks and deep learning."
"COMP9447","Security Engineering Workshop","<a href="/faculties/2017/eng/eng.html">Faculty of Engineering</a>","<a href="http://www.cse.unsw.edu.au/">School of Computer Science and Engineering</a>","<a href="http://www.cse.unsw.edu.au/~cs9447">http://www.cse.unsw.edu.au/~cs9447</a>","Sydney","Undergraduate","6","0.12500","4","COMP6441 or COMP6841 or COMP3441","COMP6447","2",""," Applied workshop in computer security and cybercrime: attack, defense, auditing.<br /><br />The course will consist of a weekly seminar followed by a three hour per week workshop and lab session on the seminar topic. Topics are drawn from data sniffing, firewalls and attacks on firewalls, root-kits, exploits, denial of service attacks, intrusion detection systems, honeypots, malware, digital rights management, cryptanalysis, cross site scripting attacks, code injection attacks, threats and countermeasures, penetration testing, and current topics in security."
"COMP9511","Human Computer Interaction","","","","","","","","","","","","",""
"COMP9517","Computer Vision","<a href="/faculties/2017/eng/eng.html">Faculty of Engineering</a>","<a href="http://www.cse.unsw.edu.au/">School of Computer Science and Engineering</a>","<a class='iw_tst' href='http://www.cse.unsw.edu.au/~cs9517'>www.cse.unsw.edu.au/~cs9517</a>","Sydney","Undergraduate","6","0.12500","3","COMP2521 or COMP1927","","2",""," Cameras and Radiometry, local shading models, Colour Vision perception, representation, modelling, linear filters for smoothing, edge detection using concvolution, fourier transform, scale and image pyramids, texture, segmentation by clustering, model fitting and probabilistic methods, tracking and Kalman filters, model-based vision, template matching using classifiers, recognition by relations, applications in robotics, medical imaging, satellite image analysis."
"COMP9596","Research Project","","","","","","","","","","","","",""
"COMP9801","Extended Design &amp; Analysis of Algorithms","","","","","","","","","","","","",""
"COMP9814","Extended Artificial Intelligence","","","","","","","","","","","","",""
"COMP9900","Information Technology Project","","","","","","","","","","","","",""
"COMP9945","Research Project","","","","","","","","","","","","",""